@using Manazor.UI.Pages.Components
@using MudBlazor.ThemeManager
@inherits LayoutComponentBase
@inject IJSRuntime CookieService
@inject IHttpContextAccessor _httpContext

<MudThemeProvider Theme="_themeManager.Theme" />
<MudDialogProvider MaxWidth="MaxWidth.Large" />
<MudSnackbarProvider />

<MudLayout>
    @if (!loggedIn)
    {
        <Login CallBack="login"></Login>
    }
    else
    {
        <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
        <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />
        <MudAppBar Elevation="_themeManager.AppBarElevation">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Custom.Brands.LinkedIn" Color="Color.Inherit" Link="https://www.linkedin.com/in/diegoquirostorres" Target="_blank" />
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/DiegoQuirosTorres/Manazor" Target="_blank" />
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation">
            <MudDrawerHeader Class="d-flex align-items-center">
                <MudImage Src="assets/logo/LogoV2.png" Width="60" Height="60" />
                <MudText Style="margin-left: -0.35rem" Typo="Typo.h6" Class="font-weight-bold align-self-end mb-2">anazor</MudText>
            </MudDrawerHeader>
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
                @Body
            </MudContainer>
        </MudMainContent>
    }
</MudLayout>

@code {
    bool _drawerOpen = true;
    bool loggedIn = false;
    Action login;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OnLog()
    {
        loggedIn = true;
    }

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool _themeManagerOpen = false;

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {

        _themeManager = value;
        StateHasChanged();
    }

    private async Task GetCookieData()
    {
        // I would like to move this to a Middleware or a service if i have time
        var userData = await GetCookieValue("userData");

        if (!string.IsNullOrEmpty(userData))
        {
            var datos = userData.Split('|');
            if (datos.Length == 4)
            {
                /*email = datos[0];
                name = datos[1];
                surname = datos[2];
                photo = datos[3];*/
                loggedIn = true;
                StateHasChanged();
            }
        }
    }


    private async Task<string> GetCookieValue(string valueName)
    {
        var arguments = new object[] { valueName };

        try
        {
            var cookies = await CookieService.InvokeAsync<string>("login.cookie", "valueName");

            if (cookies != null)
            {
                var start = cookies.IndexOf($"{valueName}=");

                if (start != -1)
                { // I dont like this, we need to optimize readability
                    start = start + valueName.Length + 1;
                    var end = cookies.IndexOf(";", start);
                    if (end == -1)
                    {
                        end = cookies.Length;
                    }

                    return cookies.Substring(start, end - start);
                }
            }

            return null;
        }
        catch(Exception ex)
        {
            return null;
        }
    }

    protected override void OnInitialized()
    {
        _themeManager.Theme = new()
            {
                Palette = new PaletteLight
                {
                    AppbarBackground = "#FFFFFF",
                    AppbarText = "#000000",
                    Surface = "#FFFFFF",
                    DrawerBackground = "#313A46",
                    DrawerText = "#8391A2",
                    DrawerIcon = "#8391A2",
                    Background = "#F9FAFD",
                    Info = "#4496d4"
                }
            };

        var updateCallback = new Action( () =>
        {
            loggedIn = true;

            StateHasChanged();
        });

        login = updateCallback;

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetCookieData();
    }

}