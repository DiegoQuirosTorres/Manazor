@page "/products"
@using Manazor.Application.Features.Categories.Queries;
@using Manazor.Application.Features.Products;
@using Manazor.Application.Features.Products.Commands.Create;
@using Manazor.Application.Features.Products.Queries;
@using Manazor.UI.Data;
@using Manazor.UI.Pages.Forms;
@using MediatR
@inject IMediator Mediator
@inject IDialogService DialogService
@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudText Class="mb-2" Typo="Typo.h6">Products</MudText>

    <MudDataGrid T="GetAllProductsDto" Items="@products" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                 Hideable="true">
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mw-100"></MudTextField>
            <MudSpacer />
            <MudButton OnClick="() => OpenDialog(false, null)" Class="me-2" Variant="Variant.Filled" Color="Color.Info">Add <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon></MudButton>
        </ToolBarContent>
        <Columns>
            <TemplateColumn Title="Name">
                <CellTemplate>
                    <MudStack Row>
                    <MudAvatar Size="Size.Medium">
                        <MudImage Size="Size.Medium" Src="@($"data:image/png;base64,{Convert.ToBase64String(context.Item!.Photo!)}")" Alt="Product image"></MudImage>
                    </MudAvatar>
                    <MudText>@context.Item.Name</MudText>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
            <PropertyColumn Property="x => x!.Price" />
            <TemplateColumn Title="Category">
                <CellTemplate>
                    <MudStack Row>
                        <MudIcon Icon="@GetIconValue(context.Item.IconId)" Style="@GetStyle(context.Item.Color)"></MudIcon>
                        <MudText>@context.Item.CategoryName</MudText>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <div class="d-flex justify-end w-100">
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="() => OpenDialog(true, context.Item)" />
                    </div>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
        <MudDataGridPager T="GetAllProductsDto" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private List<GetAllProductsDto>? products;
    private string _searchString;

    private Func<GetAllProductsDto, bool> _quickFilter => x =>
      {
          if (string.IsNullOrWhiteSpace(_searchString))
              return true;

          if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
              return true;

          return false;
      };

    protected override async Task OnInitializedAsync()
    {
        await UpdateDataAsync();
    }

    private async Task UpdateDataAsync()
    {
        products = await Mediator.Send(new GetAllProducts());
        StateHasChanged();
    }

    private string GetIconValue(int iconId)
    {
        if (IconList.IconDictionary.ContainsKey(iconId))
        {
            return IconList.IconDictionary[iconId];
        }
        else
        {
            return "";
        }
    }

    private string GetStyle(string color)
    {
        return "font-size: 1rem; color: " + color;
    }

    private async void OpenDialog(bool isEdit, GetAllProductsDto dto)
    {
        var updateCallback = new Action(async () =>
        {
            await UpdateDataAsync();
        });

        var categories = await Mediator.Send(new GetAllCategories());

        DialogParameters parameters = new DialogParameters<ProductsForm>
        {
           { x => x.CallBack, updateCallback },
           { x => x.IsEdit, isEdit },
           {x => x.Id, dto != null ? dto.Id : null},
           {x => x.Command, dto != null ? new CreateProductsCommand
                    {
                        Category = dto.Category,
                        Description = dto.Description,
                        LowQuantity = dto.LowQuantity,
                        Name = dto.Name,
                        Photo = dto.Photo,
                        Price = dto.Price,
                    }
                    :  new CreateProductsCommand() },
           {x => x.ComboData, categories}
        };

        DialogService.Show<ProductsForm>("Products", parameters);
    }
}
