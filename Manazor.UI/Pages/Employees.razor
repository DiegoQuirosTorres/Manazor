@page "/employees"
@using Manazor.Application.Features.Categories.Queries;
@using Manazor.Application.Features.Employees.Command.RegisterEmployee;
@using Manazor.Application.Features.Employees.Queries.GetAllEmployees;
@using Manazor.Application.Features.Roles.Queries;
@using Manazor.UI.Pages.Forms;
@using MediatR
@inject IMediator Mediator
@inject IDialogService DialogService

<PageTitle>Employees</PageTitle>

<h1>Employees</h1>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudText Class="mb-2" Typo="Typo.h6">Employees</MudText>

    <MudDataGrid T="GetAllEmployeesDto" MultiSelection="true" Items="@employees" SortMode="SortMode.Multiple" QuickFilter="@_quickFilter"
                 Hideable="true">
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mw-100"></MudTextField>
            <MudSpacer />
            <MudButton OnClick="() => OpenDialog(false, null)" Class="me-2" Variant="Variant.Filled" Color="Color.Info">Add <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon></MudButton>
        </ToolBarContent>
        <Columns>
            <TemplateColumn Filterable="false" Title="Employee">
                <CellTemplate>
                    <div class="d-flex">
                        <MudAvatar Class="me-3" Size="Size.Medium">
                            @if(context.Item.Photo == null)
                            {
                                <MudImage Size="Size.Medium" Src="assets/placeholder/placeholder.jpg" Alt="Product image"></MudImage>
                            }
                            else
                            {
                                <MudImage Size="Size.Medium" Src="@($"data:image/png;base64,{Convert.ToBase64String(context.Item.Photo)}")" Alt="Product image"></MudImage>
                            }
                        </MudAvatar>
                        <div class="d-flex flex-column">
                            <span style="font-weight: bold">@context.Item.Name @context.Item.Surname</span>
                            <span>@context.Item.Email</span>
                        </div>
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn  Title="Address">
                <CellTemplate>
                    <div class="d-flex">
                       <div class="me-2">@context.Item.Address</div>
                        <div class="me-2">@context.Item.City</div>
                        <div>@context.Item.Province</div>
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Birthdate">
                <CellTemplate>
                    @if(context.Item.BirthDate == null)
                    {
                        <div>

                        </div>
                    }
                    else
                    {
                        <div>
                            @context.Item.BirthDate
                        </div>
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Workcenter">
                <CellTemplate>
                    <div>
                        @context.Item.WorkCenterName
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Actions">
                <CellTemplate>
                    <div class="d-flex justify-emnd">
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="_ => OpenDialog(true, context.Item)" />
                    </div>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="GetAllWorkCentersDto" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private List<GetAllEmployeesDto>? employees;
    private string _searchString;

    protected override async Task OnInitializedAsync()
    {
        await UpdateDataAsync();
    }

    private Func<GetAllEmployeesDto, bool> _quickFilter => x =>
      {
          if (string.IsNullOrWhiteSpace(_searchString))
              return true;

          if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
              return true;

          if (x.Surname.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
              return true;

          return false;
      };

    private async Task UpdateDataAsync()
    {
        employees = await Mediator.Send(new GetAllEmployees());
        StateHasChanged();
    }

    private async void OpenDialog(bool isEdit, GetAllEmployeesDto? dto)
    {
        var updateCallback = new Action(async () =>
        {
            await UpdateDataAsync();
        });

        //var categories = await Mediator.Send(new GetAllCategories());
        var combo = await Mediator.Send(new GetAllWorkCenters());

        var roles = await Mediator.Send(new GetAllRoles());

        DialogParameters parameters = new DialogParameters<EmployeeRegisterForm>
        {
           { x => x.CallBack, updateCallback },
           { x => x.IsEdit, isEdit },
           {x => x.Id, null},
           {x => x.Command, new RegisterEmployeeCommand() },
           {x => x.ComboData,combo},
           {x => x.RoleComboData, roles}
        };

        DialogService.Show<EmployeeRegisterForm>("Employee", parameters);
    }
}