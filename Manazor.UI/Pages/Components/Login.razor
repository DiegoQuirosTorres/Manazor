@page "/login"
@using Manazor.Application.Features.Auth.Login;
@using MediatR;
@inherits LayoutComponentBase
@inject IMediator Mediator
<MudContainer Class="d-flex" Style="height: 100vh; width: 100vw; justify-content: center;">
    <MudPaper Width="20rem" Elevation="3" Style="margin: auto;">
        <MudContainer Class="d-flex flex-column" Style="align-items: center">      

                <div class="text-center">
                    <MudImage Src="assets/logo/LogoV1.png" Width="120" Height="120" />
                </div>

                <MudForm @ref="form" >
                    <MudTextField Label="Username" @bind-Value="username" Required="true" Validation="@(new[] { new Func<string, string>(ValidateUsername) })" />
                    <MudTextField Label="Password" Type="MudTextFieldType.Password" @bind-Value="password" Required="true" Validation="@(new[] { new Func<string, string>(ValidatePassword) })" />
                </MudForm>

                <MudButton Variant="Variant.Filled" Color="Color.Info" Class="mt-4 mb-4" OnClick="OnClickLogin">Login</MudButton>
        </MudContainer>
    </MudPaper>
</MudContainer>

@code {
    private string username;
    private string password;
    [Parameter] public Action CallBack { get; set; } = null!;
    MudForm form;

    private string ValidateUsername(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "Username is required.";
        return null;
    }

    private string ValidatePassword(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "Password is required.";
        return null;
    }

    private async Task OnClickLogin()
    {
        await form.Validate();

        var user = await Mediator.Send(new LoginCommand
            {
                Email = username,
                Password = password
            });

        if(user != null)
        {
            CallBack.Invoke();
        }
    }

}