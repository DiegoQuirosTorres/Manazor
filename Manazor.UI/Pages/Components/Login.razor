@page "/login"
@using Manazor.Application.Features.Auth.Login;
@using MediatR;
@inherits LayoutComponentBase
@inject IMediator Mediator
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage;

<MudContainer Class="d-flex" Style="height: 100vh; width: 100vw; justify-content: center;">
    <MudPaper Width="20rem" Elevation="3" Style="margin: auto;">
        <MudContainer Class="d-flex flex-column" Style="align-items: center; height: 25rem; justify-content: space-between">      

                <div class="text-center">
                    <MudImage Src="assets/logo/LogoV1.png" Width="120" Height="120" />
                </div>

                <MudForm @ref="form" >
                    <MudTextField Label="Username" @bind-Value="_username"  Validation="@(new[] { new Func<string, string>(ValidateUsername) })" />
                <MudTextField Label="Password" Type="MudTextFieldType.Password" @bind-Value="_password" Validation="@(new[] { new Func<string, string>(ValidatePassword) })" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="PasswordButton" AdornmentAriaLabel="Show Password" />
                </MudForm>

                <MudButton Variant="Variant.Filled" Color="Color.Info" Class="mt-4 mb-4" OnClick="OnClickLogin">Login</MudButton>

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div style="color: red;">
                        @_errorMessage
                    </div>
                }
        </MudContainer>
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public Action CallBack { get; set; } = null!;
    private string _username = "";
    private string _password = "";
    private string _errorMessage = "";
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool _isShow = false;
    MudForm form = new MudForm();



    private string ValidateUsername(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "Username is required.";
        return null;
    }

    private string ValidatePassword(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "Password is required.";
        return null;
    }

    void PasswordButton()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private async Task OnClickLogin()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            return;
        }

        var user = await Mediator.Send(new LoginCommand
            {
                Email = _username,
                Password = _password
            });

        if(user != null)
        {
            _errorMessage = "";
            await StoreCookie(user);
            CallBack.Invoke();
        }
        else
        {
            _errorMessage = "The user or the password are incorrect";

            StateHasChanged();
        }
    }

    private async Task StoreCookie(EmployeeInfoDto employee)
    {
        await sessionStorage.SetItemAsync("id", employee.Id);

        await sessionStorage.SetItemAsync("user", employee.Email);

        await sessionStorage.SetItemAsync("role", employee.RoleId);
    }

}