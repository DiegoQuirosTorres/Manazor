@using Manazor.Application.Features.Products.Queries;
@using Manazor.Application.Features.Warehouses.Command.AddProductsInWarehouses;
@using Manazor.Application.Features.Warehouses.Queries.GetProductsInWarehouse;
@using Manazor.UI.Data;
@using Manazor.UI.Pages.Forms;
@using MediatR;
@inject IMediator Mediator
@inject IDialogService DialogService
<MudDialog Style="width: 50rem;">
    <DialogContent>
        <MudDataGrid T="GetProductsInWarehouseDto" Items="@products" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                     Hideable="true">
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mw-100"></MudTextField>
                <MudSpacer />
                <MudButton OnClick="() => OpenDialog()" Class="me-2" Variant="Variant.Filled" Color="Color.Info">Add <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon></MudButton>
            </ToolBarContent>
            <Columns>
                <TemplateColumn Title="Name">
                    <CellTemplate>
                        <MudStack Row>
                            <MudAvatar Size="Size.Small">
                                <MudImage Size="Size.Small" Src="@($"data:image/png;base64,{Convert.ToBase64String(context.Item!.ProductPhoto!)}")" Alt="Product image"></MudImage>
                            </MudAvatar>
                            <MudText>@context.Item.ProductName</MudText>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Category">
                    <CellTemplate>
                        <MudStack Row>
                            <MudIcon Icon="@GetIconValue(context.Item.LogoId)" Style="@GetStyle(context.Item.CategoryColor)"></MudIcon>
                            <MudText>@context.Item.CategoryName</MudText>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Quantity">
                    <CellTemplate>
                        <MudText>@context.Item.Quantity</MudText>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="GetProductsInWarehouseDto" />
            </PagerContent>
        </MudDataGrid>
    </DialogContent>
</MudDialog>

@code {
    private List<GetProductsInWarehouseDto>? products;
    private string _searchString;
    [Parameter] public int Id { get; set; }

    private Func<GetProductsInWarehouseDto, bool> _quickFilter => x =>
      {
          if (string.IsNullOrWhiteSpace(_searchString))
              return true;

          if (x.ProductName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
              return true;

          return false;
      };

    protected override async Task OnInitializedAsync()
    {
        await UpdateDataAsync();
    }

    private async Task UpdateDataAsync()
    {
        products = await Mediator.Send(new GetProductsInWarehouses
        {
                WarehouseId = Id
        });

        StateHasChanged();
    }

    private async void OpenDialog()
    {
        var updateCallback = new Action(async () =>
        {
            await UpdateDataAsync();
        });

        AddProductsInWarehousesCommand command = new AddProductsInWarehousesCommand
        {
              WarehouseId = Id
        };

        var products = await Mediator.Send(new GetAllProducts());

        DialogParameters parameters = new DialogParameters<AddStockForm>
        {
           { x => x.Callback, updateCallback },
           { x => x.ComboData, products },
           {x => x.Command, command},
        };

        DialogService.Show<AddStockForm>("Add Stock", parameters);
    }


    private string GetIconValue(int iconId)
    {
        if (IconList.IconDictionary.ContainsKey(iconId))
        {
            return IconList.IconDictionary[iconId];
        }
        else
        {
            return "";
        }
    }


    private string GetStyle(string color)
    {
        return "font-size: 1rem; color: " + color;
    }
}
