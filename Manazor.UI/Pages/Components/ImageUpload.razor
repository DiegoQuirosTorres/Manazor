@inherits ComponentBase

    <div style="width: max-content; height: max-content; position: relative; background-color: rgb(244, 244, 244);">
    @if (ImageData == null)
        {
            <img src="@_placeholderImage" alt="Placeholder" class="card-img-top" style="height: 12rem; width: 10rem; object-fit: scale-down;" />
            <div class="card-body text-center" style="position: absolute; bottom: 15px; right: 15px;">
                <MudFileUpload T="IBrowserFile" Context="fileInput" FilesChanged="HandleFileUpload">
                    <ButtonTemplate>
                        <MudFab HtmlTag="label"
                                Color="Color.Info"
                                Size="Size.Small"
                                Icon="@Icons.Material.Filled.AttachFile"
                                for="@fileInput" />
                    </ButtonTemplate>
                </MudFileUpload>
            </div>
        }
        else
        {
        <img src="@($"data:image/png;base64,{Convert.ToBase64String(ImageData)}")"
                 alt="Uploaded Image" class="img-thumbnail"
                 style="height: 12rem; width: 10rem; object-fit: fill;" />

            <MudFab Style="position: absolute; bottom: 15px; right: 15px;" 
                OnClick="ClearPhoto" 
                Size="Size.Small"
                Color="Color.Secondary" 
                StartIcon="@Icons.Material.Filled.Delete" />
        }

    </div>

@code
{
    private string _placeholderImage = "assets/placeholder/placeholder.jpg";

    [Parameter]
    public byte[] ImageData { get; set; }

    [Parameter]
    public EventCallback<byte[]> OnUpdatedPhoto { get; set; }

    private async Task HandleFileUpload(IBrowserFile file)
    {
        if (file != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                ImageData = memoryStream.ToArray();
            }
            await OnUpdatedPhoto.InvokeAsync(ImageData);
        }
    }

    private async void ClearPhoto()
    {
        ImageData = null;
        await OnUpdatedPhoto.InvokeAsync(ImageData);
    }
}
