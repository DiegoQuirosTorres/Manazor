@page "/warehouses"
@using Manazor.Application.Features.Employees.Queries.GetAllEmployees;
@using Manazor.Application.Features.Warehouses.Command.Create;
@using Manazor.Application.Features.Warehouses.Queries;
@using Manazor.Application.Features.WorkCenters.Commands.Create;
@using Manazor.UI.Pages.Components;
@using Manazor.UI.Pages.Forms;
@using MediatR
@inject IMediator Mediator
@inject IDialogService DialogService

<PageTitle>Warehouses</PageTitle>

@if (warehouses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudText Class="mb-2" Typo="Typo.h6">Warehouses</MudText>

    <MudDataGrid T="GetAllWarehousesDto" MultiSelection="true" Items="@warehouses" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                 Hideable="true" RowClick="@OpenOverview">
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mw-100"></MudTextField>
            <MudSpacer />
            <MudButton OnClick="() => OpenDialog(false, null)" Class="me-2" Variant="Variant.Filled" Color="Color.Info">Add <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon></MudButton>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x!.Name" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="_ => {}" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="GetAllWorkCentersDto" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private List<GetAllWarehousesDto>? warehouses;
    private string _searchString;

    private Func<GetAllWarehousesDto, bool> _quickFilter => x =>
      {
          if (string.IsNullOrWhiteSpace(_searchString))
              return true;

          if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
              return true;

          return false;
      };

    protected override async Task OnInitializedAsync()
    {
        await UpdateDataAsync();
    }

    private async Task UpdateDataAsync()
    {
        warehouses = await Mediator.Send(new GetAllWarehouses());
        StateHasChanged();
    }

    private async Task OpenOverview(DataGridRowClickEventArgs<GetAllWarehousesDto> args)
    {
        DialogParameters parameters = new DialogParameters<ProductsWarehouseDialog>
        {
           { x => x.Id, args.Item.WorkCenterId},
        };

        DialogService.Show<WarehousesForm>(args.Item.Name, parameters);
    }

    private async Task OpenDialog(bool isEdit, GetAllWarehousesDto? dto)
    {
        var updateCallback = new Action(async () =>
        {
            await UpdateDataAsync();
        });

        DialogParameters parameters = new DialogParameters<WarehousesForm>
        {
           { x => x.comboData, await Mediator.Send(new GetAllWorkCenters())},
           { x => x.callback, updateCallback },
           { x => x.isEdit, isEdit },
           { x => x.command, dto != null ? null
                    :  new CreateWarehouseCommand() },
           {x => x.id, dto != null ? dto.Id : null}
        };

        DialogService.Show<WarehousesForm>("Warehouse", parameters);
    }
}