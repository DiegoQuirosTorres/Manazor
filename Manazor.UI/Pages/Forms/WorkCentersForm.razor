@using Manazor.Application.Features.WorkCenters.Commands.Create;
@using Manazor.Application.Features.WorkCenters.Commands.Update;
@using Manazor.UI.Pages.Components;
@using MediatR;
@inject IDialogService DialogService
@inject IMediator Mediator
<MudDialog IsVisibleChanged="DialogVisibleChanged" Style="width: 40rem;">
    <DialogContent>
        <MudForm @ref="form" Model="command">

            <MudTextField Class="col col-6" Validation="@(new[] { new Func<string, string>(ValidateField) })" Label="Denomination" @bind-Value="command.Denomination" Required="true" />

            <div class="row d-flex justify-content-between">
                <MudTextField Validation="@(new[] { new Func<string, string>(ValidateField) })" Label="City" @bind-Value="command.City" Required="true" />
                <MudSpacer></MudSpacer>
                <MudTextField Validation="@(new[] { new Func<string, string>(ValidateField) })" Label="Province" @bind-Value="command.Province" Required="true" />
            </div>

            <MudTextField Validation="@(new[] { new Func<string, string>(ValidateField) })" Label="Address" @bind-Value="command.Address" Required="true" />

            <div class="row d-flex mt-2" style="justify-content: end">
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Info" OnClick="Submit">Save</MudButton>
            </div>

        </MudForm>
    </DialogContent>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public Action callback { get; set; } = null!;
    [Parameter] public bool isEdit { get; set; }
    [Parameter] public int? id { get; set; }
    [Parameter] public CreateWorkCenterCommand command { get; set; } = new CreateWorkCenterCommand();
    MudForm form = new MudForm();

    void DialogVisibleChanged(bool isVisible)
    {
        if (isVisible)
        {
            Console.WriteLine("El diálogo se ha abierto. Ejecutando función...");
        }
    }

    private string ValidateField(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "This field is required.";
        return null;
    }

    private async Task Submit()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            return;
        }

        var confirmCallback = new Action(async () =>
        {
            await Confirm();
        });

        DialogParameters parameters = new DialogParameters<ConfirmationDialog>
        {
           { x => x.Callback, confirmCallback },
        };

        DialogService.Show<ConfirmationDialog>("Confirm", parameters);
    }

    public async Task Confirm()
    {
        if (isEdit)
        {
            UpdateWorkCenterCommand workCenter = new UpdateWorkCenterCommand
                {
                    Address = command.Address,
                    City = command.City,
                    Denomination = command.Denomination,
                    Province = command.Province,
                    Id = id!.Value,
                };
            await Mediator.Send(workCenter);
        }
        else
        {
            await Mediator.Send(command);
        }

        callback.Invoke();

        command = new();

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        command = new();
        MudDialog.Cancel();
    }
}